/*
 * This file is generated by jOOQ.
 */
package io.github.rogerfilipes.infrastructure.repository.jooq.tables;


import io.github.rogerfilipes.infrastructure.repository.jooq.Keys;
import io.github.rogerfilipes.infrastructure.repository.jooq.Public;
import io.github.rogerfilipes.infrastructure.repository.jooq.tables.records.UserFavoritesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFavorites extends TableImpl<UserFavoritesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_favorites</code>
     */
    public static final UserFavorites USER_FAVORITES = new UserFavorites();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFavoritesRecord> getRecordType() {
        return UserFavoritesRecord.class;
    }

    /**
     * The column <code>public.user_favorites.user_id</code>.
     */
    public final TableField<UserFavoritesRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_favorites.article</code>.
     */
    public final TableField<UserFavoritesRecord, UUID> ARTICLE = createField(DSL.name("article"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_favorites.created_at</code>.
     */
    public final TableField<UserFavoritesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private UserFavorites(Name alias, Table<UserFavoritesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFavorites(Name alias, Table<UserFavoritesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_favorites</code> table reference
     */
    public UserFavorites(String alias) {
        this(DSL.name(alias), USER_FAVORITES);
    }

    /**
     * Create an aliased <code>public.user_favorites</code> table reference
     */
    public UserFavorites(Name alias) {
        this(alias, USER_FAVORITES);
    }

    /**
     * Create a <code>public.user_favorites</code> table reference
     */
    public UserFavorites() {
        this(DSL.name("user_favorites"), null);
    }

    public <O extends Record> UserFavorites(Table<O> child, ForeignKey<O, UserFavoritesRecord> key) {
        super(child, key, USER_FAVORITES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserFavoritesRecord> getPrimaryKey() {
        return Keys.PK_USER_FAVORITES;
    }

    @Override
    public List<ForeignKey<UserFavoritesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_FAVORITES__FK_USER_FAVORITES_USER, Keys.USER_FAVORITES__FK_USER_FAVORITES_ARTICLE);
    }

    private transient Users _users;
    private transient Articles _articles;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USER_FAVORITES__FK_USER_FAVORITES_USER);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.articles</code> table.
     */
    public Articles articles() {
        if (_articles == null)
            _articles = new Articles(this, Keys.USER_FAVORITES__FK_USER_FAVORITES_ARTICLE);

        return _articles;
    }

    @Override
    public UserFavorites as(String alias) {
        return new UserFavorites(DSL.name(alias), this);
    }

    @Override
    public UserFavorites as(Name alias) {
        return new UserFavorites(alias, this);
    }

    @Override
    public UserFavorites as(Table<?> alias) {
        return new UserFavorites(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFavorites rename(String name) {
        return new UserFavorites(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFavorites rename(Name name) {
        return new UserFavorites(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFavorites rename(Table<?> name) {
        return new UserFavorites(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
