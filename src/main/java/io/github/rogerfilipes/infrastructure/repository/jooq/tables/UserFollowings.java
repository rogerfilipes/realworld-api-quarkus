/*
 * This file is generated by jOOQ.
 */
package io.github.rogerfilipes.infrastructure.repository.jooq.tables;


import io.github.rogerfilipes.infrastructure.repository.jooq.Keys;
import io.github.rogerfilipes.infrastructure.repository.jooq.Public;
import io.github.rogerfilipes.infrastructure.repository.jooq.tables.records.UserFollowingsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFollowings extends TableImpl<UserFollowingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_followings</code>
     */
    public static final UserFollowings USER_FOLLOWINGS = new UserFollowings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFollowingsRecord> getRecordType() {
        return UserFollowingsRecord.class;
    }

    /**
     * The column <code>public.user_followings.user_id</code>.
     */
    public final TableField<UserFollowingsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_followings.follows_id</code>.
     */
    public final TableField<UserFollowingsRecord, UUID> FOLLOWS_ID = createField(DSL.name("follows_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_followings.created_at</code>.
     */
    public final TableField<UserFollowingsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private UserFollowings(Name alias, Table<UserFollowingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFollowings(Name alias, Table<UserFollowingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_followings</code> table reference
     */
    public UserFollowings(String alias) {
        this(DSL.name(alias), USER_FOLLOWINGS);
    }

    /**
     * Create an aliased <code>public.user_followings</code> table reference
     */
    public UserFollowings(Name alias) {
        this(alias, USER_FOLLOWINGS);
    }

    /**
     * Create a <code>public.user_followings</code> table reference
     */
    public UserFollowings() {
        this(DSL.name("user_followings"), null);
    }

    public <O extends Record> UserFollowings(Table<O> child, ForeignKey<O, UserFollowingsRecord> key) {
        super(child, key, USER_FOLLOWINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserFollowingsRecord> getPrimaryKey() {
        return Keys.PK_USER_FOLLOWS;
    }

    @Override
    public List<ForeignKey<UserFollowingsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_FOLLOWINGS__FK_USER_FOLLOWINGS_USERS_USER, Keys.USER_FOLLOWINGS__FK_USER_FOLLOWINGS_USERS_FOLLOWS);
    }

    private transient Users _fkUserFollowingsUsersUser;
    private transient Users _fkUserFollowingsUsersFollows;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>fk_user_followings_users_user</code> key.
     */
    public Users fkUserFollowingsUsersUser() {
        if (_fkUserFollowingsUsersUser == null)
            _fkUserFollowingsUsersUser = new Users(this, Keys.USER_FOLLOWINGS__FK_USER_FOLLOWINGS_USERS_USER);

        return _fkUserFollowingsUsersUser;
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>fk_user_followings_users_follows</code> key.
     */
    public Users fkUserFollowingsUsersFollows() {
        if (_fkUserFollowingsUsersFollows == null)
            _fkUserFollowingsUsersFollows = new Users(this, Keys.USER_FOLLOWINGS__FK_USER_FOLLOWINGS_USERS_FOLLOWS);

        return _fkUserFollowingsUsersFollows;
    }

    @Override
    public UserFollowings as(String alias) {
        return new UserFollowings(DSL.name(alias), this);
    }

    @Override
    public UserFollowings as(Name alias) {
        return new UserFollowings(alias, this);
    }

    @Override
    public UserFollowings as(Table<?> alias) {
        return new UserFollowings(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFollowings rename(String name) {
        return new UserFollowings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFollowings rename(Name name) {
        return new UserFollowings(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFollowings rename(Table<?> name) {
        return new UserFollowings(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
